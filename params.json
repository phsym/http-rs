{"name":"Http-rs","tagline":"For now, that's just a pet project so I can discover Rust. So nothing really usefull to find here. Maybe later ?","body":"![License](http://img.shields.io/badge/license-BSD-lightgrey.svg)\r\n[![Build Status](https://travis-ci.org/phsym/http-rs.svg)](https://travis-ci.org/phsym/http-rs)\r\n\r\n# http-rs\r\n\r\n[Documentation](http://phsym.github.io/http-rs/doc)\r\n\r\nA simple and low level http/https client toolkit written in Rust.\r\nThis is just a pet project I use to discover and learn Rust. If you need a more complete and well supported HTTP library,\r\nI advise you to have a look at [Teepee](http://teepee.rs/) or at [Hyper](https://github.com/hyperium/hyper).\r\nPlease consider that **no design is stable for now here**. I'm just a rust noob who still have a lot to learn on this beautifull new language.\r\n\r\n# How to build\r\nAs usual with Cargo project, simply run\r\n\r\n> cargo build\r\n\r\nAnd to build html documentation, run\r\n\r\n> cargo doc\r\n\r\n# How to use\r\nMore often, you will include the library as a dependency to your project. In order to do this, add the following lines to your **Cargo.toml** file :\r\n\r\n```toml\r\n[dependencies.http-rs]\r\ngit = \"https://github.com/phsym/http-rs.git\"\r\n\r\n```\r\n\r\nThen you can start using it the following way :\r\n\r\n```rust\r\n#[macro_use] extern crate http;\r\nuse http::client::{HttpClient, HttpsClient};\r\nuse http::methods::Method;\r\n\r\nfn main() {\r\n\tlet mut http = HttpClient::new(\"www.google.com:80\").unwrap();\r\n\tmatch http.send(Method::GET, /, None, None) {\r\n\t\tOk(reply) => {},// Do something with the reply\r\n\t\tErr(e) => panic!(\"Cannot send request : {}\", e)\r\n\t}\r\n\t// The same is possible on HTTPS :\r\n\tlet mut https = HttpsClient::new(\"www.google.com:443\").unwrap();\r\n\t// (...)\r\n}\r\n```\r\n\r\nIf you want to create an HTTP client hiding which implementation is used (either HttpClient or HttpsClient), you\r\ncan get a boxed `Http` trait with the `http::open` function like this :\r\n\r\n```rust\r\n#[macro_use] extern crate http;\r\nuse http::{Protocol, open};\r\n\r\nfn main {\r\n\tlet mut http = open(Protocol::HTTP, \"www.google.com:80\").unwrap();\r\n\t// Do something with http\r\n\tlet mut https = open(Protocol::HTTPS, \"www.google.com:443\").unwrap();\r\n\t// Do something with https;\r\n}\r\n```\r\n\r\nAdditional examples are provided in documentation and in [examples](https://github.com/phsym/http-rs/tree/master/examples) directory","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}